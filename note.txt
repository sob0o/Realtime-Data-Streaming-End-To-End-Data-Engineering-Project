spark 3.5.3

scala 2.12.18


--------------------------------------------------------
* make sure to change adresse if w e can see the data is straming with spark-master 
-------------------------------------------------------

exec -it cassandra cqlsh -u cassandra -p cassandra localhost 9042   
SELECT * from spark_streams.created_users;

spark-submit --master spark://localhost:7077 spark_stream.py   
$env:PYSPARK_PYTHON = ".\.venv\Scripts\python.exe"            


spark-submit --master spark://localhost:7077 --packages org.apache.spark:spark-sql-kafka-0-10_2.12:3.5.3,com.datastax.spark:spark-cassandra-connector_2.12:3.5.0 --conf spark.cassandra.connection.host=cassandra --conf spark.executor.extraClassPath=/opt/spark/jars/* .\spark_stram_2.py


spark-submit \
    --master spark://localhost:7077 \
    --packages org.apache.spark:spark-sql-kafka-0-10_2.12:3.5.3,com.datastax.spark:spark-cassandra-connector_2.12:3.5.0 \
    --conf spark.cassandra.connection.host=cassandra \
    --conf spark.executor.extraClassPath=/opt/spark/jars/* \
    spark_stream.py











__________________________________________
import logging
from cassandra.cluster import Cluster
from pyspark.sql import SparkSession
from pyspark.sql.functions import from_json, col
from pyspark.sql.types import StructType, StructField, StringType

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)

# Cassandra keyspace and table creation
def create_keyspace(session):
    try:
        session.execute("""
            CREATE KEYSPACE IF NOT EXISTS spark_streams
            WITH replication = {'class': 'SimpleStrategy', 'replication_factor': '1'};
        """)
        logging.info("Keyspace 'spark_streams' created successfully!")
    except Exception as e:
        logging.error(f"Failed to create keyspace: {e}")


def create_table(session):
    try:
        session.execute("""
            CREATE TABLE IF NOT EXISTS spark_streams.created_users (
                id UUID PRIMARY KEY,
                first_name TEXT,
                last_name TEXT,
                gender TEXT,
                address TEXT,
                post_code TEXT,
                email TEXT,
                username TEXT,
                registered_date TEXT,
                phone TEXT,
                picture TEXT);
        """)
        logging.info("Table 'created_users' created successfully!")
    except Exception as e:
        logging.error(f"Failed to create table: {e}")

# Insert data into Cassandra
def insert_data(session, **kwargs):
    logging.debug(f"Preparing to insert data: {kwargs}")
    try:
        session.execute("""
            INSERT INTO spark_streams.created_users(id, first_name, last_name, gender, address, 
                post_code, email, username, registered_date, phone, picture)
            VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)
        """, (
            kwargs.get('id'), kwargs.get('first_name'), kwargs.get('last_name'),
            kwargs.get('gender'), kwargs.get('address'), kwargs.get('post_code'),
            kwargs.get('email'), kwargs.get('username'), kwargs.get('registered_date'),
            kwargs.get('phone'), kwargs.get('picture')
        ))
        logging.info(f"Data inserted for {kwargs.get('first_name')} {kwargs.get('last_name')}")
    except Exception as e:
        logging.error(f"Failed to insert data: {e}")

# Create Spark connection
def create_spark_connection():
    try:
        spark_conn = SparkSession.builder \
            .appName('SparkDataStreaming') \
            .config('spark.jars.packages', "com.datastax.spark:spark-cassandra-connector_2.12:3.5.0,"
                                           "org.apache.spark:spark-sql-kafka-0-10_2.12:3.5.3") \
            .config('spark.cassandra.connection.host', 'localhost') \
            .getOrCreate()
        spark_conn.sparkContext.setLogLevel("ERROR")
        logging.info("Spark connection established successfully!")
        return spark_conn
    except Exception as e:
        logging.error(f"Failed to create Spark session: {e}")
        return None

# Connect to Kafka
def connect_to_kafka(spark_conn):
    try:
        spark_df = spark_conn.readStream \
            .format('kafka') \
            .option('kafka.bootstrap.servers', 'localhost:9092') \
            .option('subscribe', 'users_created') \
            .option('startingOffsets', 'earliest') \
            .load()
        logging.info("Kafka DataFrame created successfully.")
        return spark_df
    except Exception as e:
        logging.error(f"Failed to connect to Kafka: {e}")
        return None

# Create Cassandra connection
def create_cassandra_connection():
    try:
        cluster = Cluster(['localhost'])
        session = cluster.connect()
        logging.info("Cassandra connection established successfully!")
        return session
    except Exception as e:
        logging.error(f"Failed to create Cassandra connection: {e}")
        return None

# Parse Kafka DataFrame and extract schema
def create_selection_df_from_kafka(spark_df):
    schema = StructType([
        StructField("id", StringType(), False),
        StructField("first_name", StringType(), False),
        StructField("last_name", StringType(), False),
        StructField("gender", StringType(), False),
        StructField("address", StringType(), False),
        StructField("post_code", StringType(), False),
        StructField("email", StringType(), False),
        StructField("username", StringType(), False),
        StructField("registered_date", StringType(), False),
        StructField("phone", StringType(), False),
        StructField("picture", StringType(), False)
    ])

    try:
        parsed_df = spark_df.selectExpr("CAST(value AS STRING)") \
            .select(from_json(col('value'), schema).alias('data')) \
            .select("data.*")
        logging.info("Kafka data parsed successfully.")
        return parsed_df
    except Exception as e:
        logging.error(f"Failed to parse Kafka data: {e}")
        return None

# Function to print received batch data to the console
def print_batch(batch_df, batch_id):
    logging.info(f"Processing new batch with id {batch_id}:")
    batch_df.show(truncate=False)

if __name__ == "__main__":
    logging.info("Application started.")
    
    # Create Spark connection
    spark_conn = create_spark_connection()
    if spark_conn:
        # Connect to Kafka
        spark_df = connect_to_kafka(spark_conn)
        if spark_df:
            # Parse Kafka data
            selection_df = create_selection_df_from_kafka(spark_df)
            if selection_df:
                # Create Cassandra connection
                cassandra_session = create_cassandra_connection()
                if cassandra_session:
                    create_keyspace(cassandra_session)
                    create_table(cassandra_session)

                    try:
                        logging.info("Starting streaming...")

                        # Write data to Cassandra and print to console
                        # streaming_query = (selection_df.writeStream
                        #                    .foreachBatch(print_batch)  # Print each batch's data
                        #                    .outputMode("append")  # Or 'update' depending on your use case
                        #                    .start())

                        # streaming_query.awaitTermination()

                        streaming_query = (selection_df.writeStream.format("org.apache.spark.sql.cassandra")
                        .option('checkpointLocation', '/tmp/checkpoint')
                        .option('keyspace', 'spark_streams')
                        .option('table', 'created_users')
                        .start())

                        streaming_query.awaitTermination()

                    except Exception as e:
                        logging.error(f"Streaming failed: {e}")



services:
  zookeeper:
      image: confluentinc/cp-zookeeper:7.4.0
      hostname: zookeeper
      container_name: zookeeper
      ports:
        - "2181:2181"
      environment:
        ZOOKEEPER_CLIENT_PORT: 2181
        ZOOKEEPER_TICK_TIME: 2000
      healthcheck:
        test: ['CMD', 'bash', '-c', "echo 'ruok' | nc localhost 2181"]
        interval: 10s
        timeout: 5s
        retries: 5
      networks:
        - confluent

  broker:
    image: confluentinc/cp-server:7.4.0
    hostname: broker
    container_name: broker
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
      - "9101:9101"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
      KAFKA_CONFLUENT_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: broker:29092
      CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
      CONFLUENT_METRICS_ENABLE: 'false'
      CONFLUENT_SUPPORT_CUSTOMER_ID: 'anonymous'
    networks:
      - confluent
    healthcheck:
      test: [ "CMD", "bash", "-c", 'nc -z localhost 9092' ]
      interval: 10s
      timeout: 5s
      retries: 5
      

  schema-registry:
    image: confluentinc/cp-schema-registry:7.4.0
    hostname: schema-registry
    container_name: schema-registry
    depends_on:
      broker:
        condition: service_healthy
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'broker:29092'
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
    networks:
      - confluent
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8081/" ]
      interval: 30s
      timeout: 10s
      retries: 5

  control-center:
    image: confluentinc/cp-enterprise-control-center:7.4.0
    hostname: control-center
    container_name: control-center
    depends_on:
      broker:
        condition: service_healthy
      schema-registry:
        condition: service_healthy
    ports:
      - "9021:9021"
    environment:
      CONTROL_CENTER_BOOTSTRAP_SERVERS: 'broker:29092'
      CONTROL_CENTER_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
      CONTROL_CENTER_REPLICATION_FACTOR: 1
      CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
      CONFLUENT_METRICS_TOPIC_REPLICATION: 1
      CONFLIENT_METRICS_ENABLE: 'false'
      PORT: 9021
    networks:
      - confluent
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9021/health" ]
      interval: 30s
      timeout: 10s
      retries: 5

  webserver:
    image: apache/airflow:2.6.0-python3.9
    command: webserver
    entrypoint: ['/opt/airflow/script/entrypoint.sh']
    depends_on:
      - postgres
    environment:
      - LOAD_EX=n
      - EXECUTOR=Sequential
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@postgres:5432/airflow
      - AIRFLOW_WEBSERVER_SECRET_KEY=this_is_a_very_secured_key
    logging:
      options:
        max-size: 10m
        max-file: "3"
    volumes:
      - ./dags:/opt/airflow/dags
      - ./script/entrypoint.sh:/opt/airflow/script/entrypoint.sh
      - ./requirements.txt:/opt/airflow/requirements.txt
    ports:
      - "8080:8080"
    healthcheck:
      test: ['CMD-SHELL', "[ -f /opt/airflow/airflow-webserver.pid ]"]
      interval: 30s
      timeout: 30s
      retries: 3
    networks:
      - confluent

  scheduler:
    image: apache/airflow:2.6.0-python3.9
    depends_on:
      webserver:
        condition: service_healthy
    volumes:
      - ./dags:/opt/airflow/dags
      - ./script/entrypoint.sh:/opt/airflow/script/entrypoint.sh
      - ./requirements.txt:/opt/airflow/requirements.txt
    environment:
      - LOAD_EX=n
      - EXECUTOR=Sequential
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@postgres:5432/airflow
      - AIRFLOW_WEBSERVER_SECRET_KEY=this_is_a_very_secured_key
    command: bash -c "pip install -r ./requirements.txt && airflow db upgrade && airflow scheduler"
    networks:
      - confluent

  postgres:
    image: postgres:14.0
    environment:
      - POSTGRES_USER=airflow
      - POSTGRES_PASSWORD=airflow
      - POSTGRES_DB=airflow
    logging:
      options:
        max-size: 10m
        max-file: "3"
    networks:
      - confluent

  # spark-master:
  #   image: bitnami/spark:latest
  #   command: bin/spark-class org.apache.spark.deploy.master.Master
  #   ports:
  #     - "9090:8080"
  #     - "7077:7077"
  #   networks:
  #     - confluent

  spark-master:
    image: bitnami/spark:latest
    command:  bin/spark-class org.apache.spark.deploy.master.Master
    ports:
      - "9090:8080"      # Spark UI
      - "7077:7077"      # Spark Master
    volumes:
      - ./apps:/opt/spark-apps  # Mounting shared apps directory
      - ./data:/opt/spark-data  # Mounting shared data directory
    environment:
      - SPARK_MODE=master
      - SPARK_LOCAL_IP=spark-master   # Master node's local IP
      - SPARK_WORKLOAD=master        # Set the workload as master
      - SPARK_MASTER=spark://spark-master:7077 # Setting master URL
      - SPARK_MASTER_HOST=spark-master
      - SPARK_MASTER_PORT=7077
      - SPARK_EXECUTOR_MEMORY=2G
    networks:
      - confluent

  spark-worker:
    image: bitnami/spark:latest
    command:  bin/spark-class org.apache.spark.deploy.worker.Worker spark://spark-master:7077
    ports:
      - "9091:8080"  # Spark Worker UI
      - "7000:7000"  # Spark worker metrics
    depends_on:
      - spark-master
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER=spark://spark-master:7077
      - SPARK_WORKER_CORES=4  # Adjust number of cores for worker
      - SPARK_WORKER_MEMORY=4g  # Memory allocation for worker
      - SPARK_DRIVER_MEMORY=3g  # Driver memory allocation
      - SPARK_EXECUTOR_MEMORY=3g  # Executor memory allocation
      - SPARK_WORKLOAD=worker
      - SPARK_LOCAL_IP=spark-worker
    volumes:
      - ./apps:/opt/spark-apps
      - ./data:/opt/spark-data
    networks:
      - confluent


  # spark-worker:
  #   image: bitnami/spark:latest
  #   command: bin/spark-class org.apache.spark.deploy.worker.Worker spark://spark-master:7077
  #   depends_on:
  #     - spark-master
  #   environment:
  #     SPARK_MODE: worker
  #     SPARK_WORKER_CORES: 2
  #     SPARK_WORKER_MEMORY: 2g
  #     SPARK_MASTER_URL: spark://spark-master:7077
  #   healthcheck:
  #     test: ["CMD", "nc", "-zv", "spark-master", "7077"]
  #     interval: 10s
  #     retries: 3
  #   networks:
  #     - confluent




  cassandra_db:
    image: cassandra:latest
    container_name: cassandra
    hostname: cassandra
    ports:
      - "9042:9042"
    environment:
      - MAX_HEAP_SIZE=512M
      - HEAP_NEWSIZE=100M
      - CASSANDRA_USERNAME=cassandra
      - CASSANDRA_PASSWORD=cassandra
    networks:
      - confluent  

networks:
    confluent: